Spring容器的refresh() ：容器的创建刷新
1.prepareRefresh();刷新前的预处理
    1）initPropertySources()；初始化一些属性设置，子类自定义个性化的属性设置方法；
    2）getEnvironment().validateRequiredProperties();检验属性的合法性等
    3）this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期的事件
2.obtainFreshBeanFactory();获取beanFactory
    1）obtainFreshBeanFactory();刷新【创建】BeanFactory
        a. GenericApplicationContext类 调用无参构造器创建一个 this.beanFactory = new DefaultListableBeanFactory()并设置id;
    2）getBeanFactory();返回GenericApplicationContext创建的BeanFactory对象
    3）将创建的BeanFactory【DefaultListableBeanFactory】返回
3.prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）
    1）设置类加载器、支撑表达式解析器
    2）添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
    3）设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware等等
    4）注册可以解析的自动自动装配，我们能直接在任何组件中自动注入BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    5）添加BeanPostProcessor【ApplicationListenerDetector】
    6）添加编译时的AspectJ
    7）给BeanFactory中注册一些能用的组件：environment【ConfigurableEnvironment】、SystemProperties【Map<String,Object>】
4.postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作
    1）子类通过重写这个方法在BeanFactory创建并预准备完成以后做进一步的设置
================================================以上是BeanFactory的创建以及预准备工作===========================================================
5.invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor的方法
    BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的
       两个接口：BeanFactoryPostProcessors、BeanDefinitionRegistryPostProcessor
    1）先执行BeanDefinitionRegistryPostProcessor 【postProcessor.postProcessBeanDefinitionRegistry(registry)】
        a.获取所有的BeanDefinitionRegistryPostProcessor
        b.看优先级排序，执行顺序为实现了PriorityOrdered优先级的BeanDefinitionRegistryPostProcessor
        c.再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
        d.最后执行没有实现任何优先级或顺序接口的BeanDefinitionRegistryPostProcessor
    2）再执行BeanFactoryPostProcessor 【postProcessor.postProcessBeanFactory()】
        a.获取所有的BeanFactoryPostProcessor
        b.看优先级排序，执行顺序为实现了PriorityOrdered优先级的BeanFactoryPostProcessor
        c.再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
        d.最后执行没有实现任何优先级或顺序接口的BeanFactoryPostProcessor
6.registerBeanPostProcessors(beanFactory);注册BeanPostProcessors（Bean的后置处理器）
        不同接口类型的BeanPostProcessor在Bean创建前后的执行时机是不一样的 【beanFactory.addBeanPostProcessor(postProcessor)】
        BeanPostProcessor
        DestructionAwareBeanPostProcessor
        InstantiationAwareBeanPostProcessor
        SmartInstantiationAwareBeanPostProcessor
        MergedBeanDefinitionPostProcessor
    1）获取所有的BeanPostProcessor，后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级
    2）先注册PriorityOrdered优先级接口的BeanPostProcessor，添加到BeanFactory中
    3）再注册Ordered排序接口的BeanPostProcessor
    4）最后注册没有实现任何优先级接口的BeanPostProcessor
    5）最终注册MergedBeanDefinitionPostProcessor
    6）注册一个ApplicationListenerDetector来在Bean创建完成后检查是否是ApplicationListener
       如果是则执行this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);保存
7.initMessageSource();初始化MessageSource组件（做国际化功能，消息绑定，消息解析）
    MessageSource：取出国际化配置文件的某个key值；能按照区域信息获取
    1）获取BeanFactory
    2）看容器中是否有id为messageSource的组件
       有则赋值给messageSource，没有则创建一个DelegatingMessageSource
    3）把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource
       调用MessageSource.getMessage()方法
    beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
8.initApplicationEventMulticaster();初始化事件派发器
    1）获取BeanFactory
    2）从BeanFactory中获取ApplicationEventMulticaster类型的派发器；
    3）如果上一步没有配置，创建一个SimpleApplicationEventMulticaster
    4）将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件之间自动注入即可
9.onRefresh();留给子容器（子类）
    1）子类重写该方法，在容器刷新的时候可以自定义逻辑
10.registerListeners();给容器中将项目里所有的ApplicationListener注册进来
    1）从容器中拿到所有ApplicationListener
    2）将每个监听器添加到派发器中
        getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3）派发之前步骤产生的事件
11.finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例Bean
    1）beanFactory.preInstantiateSingletons();初始化剩下的单实例Bean
        1.获取容器中的所有Bean，依次进行初始化和创建对象
        2.获取Bean的定义信息
        3.Bean不是抽象的、是单实例的、不是懒加载的；
            a.判断是否是FactoryBean，是否是实现FactoryBean接口的
            b.如果不是FactoryBean，就利用getBean(beanName);来创建对象
                getBean(beanName) : ioc.getBean()
                doGetBean(name, null, null, false);
                先获取缓存中保存的单实例Bean，如果能获取到说明这个Bean之前被创造过（所有创建过的单实例Bean都会被缓存起来）
                    	从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);中获取
                缓存中获取不到，开启Bean创建流程
                标记当前Bean已经被创建；markBeanAsCreated(beanName);
                获取Bean的定义信息
                获取当前Bean依赖的其他Bean：如果有还是按照getBean(beanName)的方式先创建依赖的Bean
                启动单实例Bean的创建流程
                    a.createBean(beanName, mbd, args);
                    b.Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessors先提前拦截返回代理对象
                      先InstantiationAwareBeanPostProcessors提前执行，触发postProcessBeforeInstantiation()方法
                      如果有返回值，再触发postProcessAfterInitialization()方法
                    c.如果没有返回对象，则会调用d
                    d.Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建实例
                        创建Bean实例，createBeanInstance(beanName, mbd, args);利用工厂方法或者对象的构造器创建Bean实例
                        applyMergedBeanDefinitionPostProcessors()方法启动 MergedBeanDefinitionPostProcessor并调用bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);
                        为Bean的属性赋值，populateBean(beanName, mbd, instanceWrapper);
                            赋值之前：
                                拿到InstantiationAwareBeanPostProcessor后置处理器，执行postProcessAfterInstantiation()方法
                                拿到InstantiationAwareBeanPostProcessor后置处理器，执行postProcessPropertyValues()方法
                            赋值：
                                应用Bean属性的值，为属性利用setter方法等进行赋值，applyPropertyValues(beanName, mbd, bw, pvs);
                        Bean的初始化 initializeBean(beanName, exposedObject, mbd);
                            【执行Aware接口的方法】，invokeAwareMethods(beanName, bean);
                                BeanNameAware/BeanClassLoaderAware/BeanFactoryAware
                            【执行后置处理器初始化之前的方法】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                                BeanPostProcessor.postProcessBeforeInitialization();
                            【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
                                判断是否为InitializingBean接口的实现，是则执行接口规定的初始化
                                是否自定义了初始化方法
                            【执行后置处理器初始化之后的方法】applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                BeanPostProcessor.postProcessAfterInitialization();
                        注册Bean的销毁方法，registerDisposableBeanIfNecessary(beanName, bean, mbd);
                    e.将创建的Bean添加到缓存singletonObjects【Map对象】中
                    【IOC容器就是这些Map，很多的Map里保存了单实例Bean，环境信息等】
            c.所有Bean都利用 getBean()创建完成后：
                检查所有的Bean是否是SmartInitializingSingleton接口类型的Bean；如果是，就执行afterSingletonsInstantiated()方法
12.finishRefresh()；完成BeanFactory的初始化创建工作，IOC容器就创建完成；
    1）initLifecycleProcessor();初始化和生命周期有关的后置处理器；
       默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】，如果没有则 new DefaultLifecycleProcessor()；
       并注册到容器中
       写一个LifecycleProcessor的实现类，可以在BeanFactory的 onRefresh()/ onClose()进行拦截
    2）getLifecycleProcessor().onRefresh();
       拿到生命周期处理器（BeanFactory）；回调onRefresh()方法
    3）发布容器刷新完成事件 publishEvent(new ContextRefreshedEvent(this));
    4）LiveBeansView.registerApplicationContext(this);

==============================================【总结】================================================
1.Spring容器在启动的时候，先会保存所有注册进来的Bean定义信息；
    1）xml注册Bean；
    2）注解注册Bean
2.Spring容器会在合适的时机创建Bean
    1）用到这个bean的时候，利用getBean()方法创建bean
    2）统一创建剩下的所有bean，finishBeanFactoryInitialization(beanFactory)
3.后置处理器；
    每一个bean创建完成后，都会使用各种后置处理器进行处理，来增强bean的功能
    AutowiredAnnotationBeanPostProcessor：处理自动注入
    AnnotationAwareAspectJAutoProxyCreator：实现AOP功能
4.事件驱动模型
    ApplicationListener 事件监听
    ApplicationEventMulticaster 事件派发


